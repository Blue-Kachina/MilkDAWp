name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up CMake
        uses: lukka/get-cmake@v3.28.3

      - name: Bootstrap dependencies (POSIX)
        if: runner.os != 'Windows'
        run: |
          chmod +x scripts/bootstrap.sh
          ./scripts/bootstrap.sh

      - name: Install vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $vcpkgRoot = 'C:\vcpkg'
          if (-not (Test-Path $vcpkgRoot)) {
            git clone https://github.com/microsoft/vcpkg.git $vcpkgRoot
          }
          Set-Location $vcpkgRoot
          git pull
          .\bootstrap-vcpkg.bat
          "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Bootstrap dependencies (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          scripts\bootstrap.bat

      - name: Configure (tests only, POSIX)
        if: runner.os != 'Windows'
        run: |
          cmake -S . -B build-ci -G "Ninja" -DBUILD_TESTING=ON -DMILKDAWP_BUILD_PLUGIN=OFF

      - name: Configure, Build and Run tests (Windows, MSVC DevCmd)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > vsdir.txt
          set /p VSDIR=<vsdir.txt
          call "%VSDIR%\Common7\Tools\VsDevCmd.bat" -arch=x64
          cmake --preset dev-win -DBUILD_TESTING=ON -DMILKDAWP_BUILD_PLUGIN=OFF
          cmake --build build-win --config RelWithDebInfo --parallel
          ctest --test-dir build-win -C RelWithDebInfo --output-on-failure

      - name: Build tests (POSIX)
        if: runner.os != 'Windows'
        run: cmake --build build-ci --config RelWithDebInfo --parallel


      - name: Run tests (POSIX)
        if: runner.os != 'Windows'
        run: ctest --test-dir build-ci -C RelWithDebInfo --output-on-failure


  # Optional: package plugin on Windows to catch regressions (does not run tests)
  windows-plugin-build:
    name: Windows Plugin Build
    runs-on: windows-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up CMake
        uses: lukka/get-cmake@v3.28.3

      - name: Install vcpkg
        shell: pwsh
        run: |
          $vcpkgRoot = 'C:\vcpkg'
          if (-not (Test-Path $vcpkgRoot)) {
            git clone https://github.com/microsoft/vcpkg.git $vcpkgRoot
          }
          Set-Location $vcpkgRoot
          git pull
          .\bootstrap-vcpkg.bat
          "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Bootstrap
        shell: cmd
        run: scripts\bootstrap.bat

      - name: Configure (plugin, dev-win preset)
        run: cmake --preset dev-win

      - name: Build VST3 (Release via preset)
        run: cmake --build --preset dev-win-Release --target MilkDAWp_VST3 --parallel

      - name: Verify runtime layout (projectM DLL next to VST3)
        shell: pwsh
        run: |
          ./scripts/ci/check_runtime_win.ps1 -BuildDir "build-win" -Config "Release"

      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-vst3-release
          path: |
            build-win/MilkDAWp_artefacts/Release/VST3/**/*.vst3
            build-win/MilkDAWp_artefacts/Release/VST3/**/*.dll
          if-no-files-found: warn
